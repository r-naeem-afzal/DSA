[
    {
        "label": "CircularLinkedList",
        "importPath": "data_structures.linked_lists.circular_linked_list",
        "description": "data_structures.linked_lists.circular_linked_list",
        "isExtraImport": true,
        "detail": "data_structures.linked_lists.circular_linked_list",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "DoublyCircularLinkedList",
        "importPath": "linked_lists.doubly_circular_linked_list",
        "description": "linked_lists.doubly_circular_linked_list",
        "isExtraImport": true,
        "detail": "linked_lists.doubly_circular_linked_list",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "data_structures.linked_lists.node",
        "description": "data_structures.linked_lists.node",
        "isExtraImport": true,
        "detail": "data_structures.linked_lists.node",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "data_structures.linked_lists.node",
        "description": "data_structures.linked_lists.node",
        "isExtraImport": true,
        "detail": "data_structures.linked_lists.node",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "data_structures.linked_lists.node",
        "description": "data_structures.linked_lists.node",
        "isExtraImport": true,
        "detail": "data_structures.linked_lists.node",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "node",
        "description": "node",
        "isExtraImport": true,
        "detail": "node",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "node",
        "description": "node",
        "isExtraImport": true,
        "detail": "node",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queues.queue",
        "description": "queues.queue",
        "isExtraImport": true,
        "detail": "queues.queue",
        "documentation": {}
    },
    {
        "label": "Stack",
        "importPath": "stacks.stack",
        "description": "stacks.stack",
        "isExtraImport": true,
        "detail": "stacks.stack",
        "documentation": {}
    },
    {
        "label": "GroceryListManager",
        "kind": 6,
        "importPath": "data_structures.arrays.examples.grocery_list",
        "description": "data_structures.arrays.examples.grocery_list",
        "peekOfCode": "class GroceryListManager:\n    def __init__(self):\n        self.grocery_list = []\n    def display_menu(self):\n        print(\"\\nGrocery List Manager\")\n        print(\"1. Add Item\")\n        print(\"2. Remove Item\")\n        print(\"3. View List\")\n        print(\"4. Sort List\")\n        print(\"5. Reverse List\")",
        "detail": "data_structures.arrays.examples.grocery_list",
        "documentation": {}
    },
    {
        "label": "empty_array",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "empty_array = []\n# * Create a filled arrau\nfilled_array = [\"A\", \"B\", \"C\"]\nprint(\"\\n\")\nprint(\"Accessing Elements\")\nprint(\"\\n\")\n# ? Method: Add\n# * Add an element to the end of the array\nempty_array.append(\"A\")\nprint(f\"Add an element to the end of the array: {empty_array}\")  # Output: ['A']",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "filled_array",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "filled_array = [\"A\", \"B\", \"C\"]\nprint(\"\\n\")\nprint(\"Accessing Elements\")\nprint(\"\\n\")\n# ? Method: Add\n# * Add an element to the end of the array\nempty_array.append(\"A\")\nprint(f\"Add an element to the end of the array: {empty_array}\")  # Output: ['A']\n# ? Method: Insert\n# * Insert an element at a specific index",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "numbers = [i for i in range(10)]\nprint(\n    f\"Create a list of numbers from 0 to 9: {numbers}\"\n)  # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n# * Create a list of even numbers from 0 to 9\neven_numbers = [i for i in range(10) if i % 2 == 0]\nprint(\n    f\"Create a list of even numbers from 0 to 9: {even_numbers}\"\n)  # Output: [0, 2, 4, 6, 8]\n# * Create a list of squares from 0 to 9",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "even_numbers",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "even_numbers = [i for i in range(10) if i % 2 == 0]\nprint(\n    f\"Create a list of even numbers from 0 to 9: {even_numbers}\"\n)  # Output: [0, 2, 4, 6, 8]\n# * Create a list of squares from 0 to 9\nsquares = [i**2 for i in range(10)]\nprint(\n    f\"Create a list of squares from 0 to 9: {squares}\"\n)  # Output: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n# * Create a list of squares from 0 to 9, but only if the number is even",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "squares",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "squares = [i**2 for i in range(10)]\nprint(\n    f\"Create a list of squares from 0 to 9: {squares}\"\n)  # Output: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n# * Create a list of squares from 0 to 9, but only if the number is even\neven_squares = [i**2 for i in range(10) if i % 2 == 0]\nprint(\n    f\"Create a list of squares from 0 to 9, but only if the number is even: {even_squares}\"\n)  # Output: [0, 4, 16, 36, 64]\n# * Create a list of squares from 0 to 9, but only if the number is even, and the number is greater than 4",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "even_squares",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "even_squares = [i**2 for i in range(10) if i % 2 == 0]\nprint(\n    f\"Create a list of squares from 0 to 9, but only if the number is even: {even_squares}\"\n)  # Output: [0, 4, 16, 36, 64]\n# * Create a list of squares from 0 to 9, but only if the number is even, and the number is greater than 4\neven_squares_greater_than_4 = [i**2 for i in range(10) if i % 2 == 0 and i > 4]\nprint(\n    f\"Create a list of squares from 0 to 9, but only if the number is even, and the number is greater than 4: {even_squares_greater_than_4}\"\n)  # Output: [16, 36, 64]\nprint(\"\\n\")",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "even_squares_greater_than_4",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "even_squares_greater_than_4 = [i**2 for i in range(10) if i % 2 == 0 and i > 4]\nprint(\n    f\"Create a list of squares from 0 to 9, but only if the number is even, and the number is greater than 4: {even_squares_greater_than_4}\"\n)  # Output: [16, 36, 64]\nprint(\"\\n\")\nprint(\"Slicing Arrays\")\nprint(\"\\n\")\n#! Slicing Arrays\n# * Create an array of numbers from 0 to 9\nnumbers = [i for i in range(10)]",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "numbers = [i for i in range(10)]\nprint(\n    f\"Create an array of numbers from 0 to 9: {numbers}\"\n)  # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n# * Get the first element\nfirst_element = numbers[0]\nprint(f\"Get the first element: {first_element}\")  # Output: 0\n# * Get the last element\nlast_element = numbers[-1]\nprint(f\"Get the last element: {last_element}\")  # Output: 9",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "first_element",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "first_element = numbers[0]\nprint(f\"Get the first element: {first_element}\")  # Output: 0\n# * Get the last element\nlast_element = numbers[-1]\nprint(f\"Get the last element: {last_element}\")  # Output: 9\n# * Get the first 3 elements\nfirst_3_elements = numbers[:3]\nprint(f\"Get the first 3 elements: {first_3_elements}\")  # Output: [0, 1, 2]\n# * Get the last 3 elements\nlast_3_elements = numbers[-3:]",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "last_element",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "last_element = numbers[-1]\nprint(f\"Get the last element: {last_element}\")  # Output: 9\n# * Get the first 3 elements\nfirst_3_elements = numbers[:3]\nprint(f\"Get the first 3 elements: {first_3_elements}\")  # Output: [0, 1, 2]\n# * Get the last 3 elements\nlast_3_elements = numbers[-3:]\nprint(f\"Get the last 3 elements: {last_3_elements}\")  # Output: [7, 8, 9]\n# * Get the elements from index 2 to 5\nelements_2_to_5 = numbers[2:6]",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "first_3_elements",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "first_3_elements = numbers[:3]\nprint(f\"Get the first 3 elements: {first_3_elements}\")  # Output: [0, 1, 2]\n# * Get the last 3 elements\nlast_3_elements = numbers[-3:]\nprint(f\"Get the last 3 elements: {last_3_elements}\")  # Output: [7, 8, 9]\n# * Get the elements from index 2 to 5\nelements_2_to_5 = numbers[2:6]\nprint(f\"Get the elements from index 2 to 5: {elements_2_to_5}\")  # Output: [2, 3, 4, 5]\n# * Get the elements from index 2 to 5, but only every other element\nelements_2_to_5_every_other = numbers[2:6:2]",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "last_3_elements",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "last_3_elements = numbers[-3:]\nprint(f\"Get the last 3 elements: {last_3_elements}\")  # Output: [7, 8, 9]\n# * Get the elements from index 2 to 5\nelements_2_to_5 = numbers[2:6]\nprint(f\"Get the elements from index 2 to 5: {elements_2_to_5}\")  # Output: [2, 3, 4, 5]\n# * Get the elements from index 2 to 5, but only every other element\nelements_2_to_5_every_other = numbers[2:6:2]\nprint(\n    f\"Get the elements from index 2 to 5, but only every other element: {elements_2_to_5_every_other}\"\n)  # Output: [2, 4]",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "elements_2_to_5",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "elements_2_to_5 = numbers[2:6]\nprint(f\"Get the elements from index 2 to 5: {elements_2_to_5}\")  # Output: [2, 3, 4, 5]\n# * Get the elements from index 2 to 5, but only every other element\nelements_2_to_5_every_other = numbers[2:6:2]\nprint(\n    f\"Get the elements from index 2 to 5, but only every other element: {elements_2_to_5_every_other}\"\n)  # Output: [2, 4]\n# * Reverse the array\nreversed_array = numbers[::-1]\nprint(f\"Reverse the array: {reversed_array}\")  # Output: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "elements_2_to_5_every_other",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "elements_2_to_5_every_other = numbers[2:6:2]\nprint(\n    f\"Get the elements from index 2 to 5, but only every other element: {elements_2_to_5_every_other}\"\n)  # Output: [2, 4]\n# * Reverse the array\nreversed_array = numbers[::-1]\nprint(f\"Reverse the array: {reversed_array}\")  # Output: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n# * Reverse the array, but only every other element\nreversed_array_every_other = numbers[::-2]\nprint(",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "reversed_array",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "reversed_array = numbers[::-1]\nprint(f\"Reverse the array: {reversed_array}\")  # Output: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n# * Reverse the array, but only every other element\nreversed_array_every_other = numbers[::-2]\nprint(\n    f\"Reverse the array, but only every other element: {reversed_array_every_other}\"\n)  # Output: [9, 7, 5, 3, 1]\n# * Reverse the array, but only the first 5 elements\nreversed_array_first_5 = numbers[5::-1]\nprint(",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "reversed_array_every_other",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "reversed_array_every_other = numbers[::-2]\nprint(\n    f\"Reverse the array, but only every other element: {reversed_array_every_other}\"\n)  # Output: [9, 7, 5, 3, 1]\n# * Reverse the array, but only the first 5 elements\nreversed_array_first_5 = numbers[5::-1]\nprint(\n    f\"Reverse the array, but only the first 5 elements: {reversed_array_first_5}\"\n)  # Output: [5, 4, 3, 2, 1, 0]\n# * Reverse the array, but only the last 5 elements",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "reversed_array_first_5",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "reversed_array_first_5 = numbers[5::-1]\nprint(\n    f\"Reverse the array, but only the first 5 elements: {reversed_array_first_5}\"\n)  # Output: [5, 4, 3, 2, 1, 0]\n# * Reverse the array, but only the last 5 elements\nreversed_array_last_5 = numbers[:-6:-1]\nprint(\n    f\"Reverse the array, but only the last 5 elements: {reversed_array_last_5}\"\n)  # Output: [9, 8, 7, 6, 5]\n# * Reverse the array, but only the first 5 elements, and only every other element",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "reversed_array_last_5",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "reversed_array_last_5 = numbers[:-6:-1]\nprint(\n    f\"Reverse the array, but only the last 5 elements: {reversed_array_last_5}\"\n)  # Output: [9, 8, 7, 6, 5]\n# * Reverse the array, but only the first 5 elements, and only every other element\nreversed_array_first_5_every_other = numbers[5::-2]\nprint(\n    f\"Reverse the array, but only the first 5 elements, and only every other element: {reversed_array_first_5_every_other}\"\n)  # Output: [5, 3, 1]\n# * Reverse the array, but only the last 5 elements, and only every other element",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "reversed_array_first_5_every_other",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "reversed_array_first_5_every_other = numbers[5::-2]\nprint(\n    f\"Reverse the array, but only the first 5 elements, and only every other element: {reversed_array_first_5_every_other}\"\n)  # Output: [5, 3, 1]\n# * Reverse the array, but only the last 5 elements, and only every other element\nreversed_array_last_5_every_other = numbers[:-6:-2]\nprint(\n    f\"Reverse the array, but only the last 5 elements, and only every other element: {reversed_array_last_5_every_other}\"\n)  # Output: [9, 7, 5]",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "reversed_array_last_5_every_other",
        "kind": 5,
        "importPath": "data_structures.arrays.arrays",
        "description": "data_structures.arrays.arrays",
        "peekOfCode": "reversed_array_last_5_every_other = numbers[:-6:-2]\nprint(\n    f\"Reverse the array, but only the last 5 elements, and only every other element: {reversed_array_last_5_every_other}\"\n)  # Output: [9, 7, 5]",
        "detail": "data_structures.arrays.arrays",
        "documentation": {}
    },
    {
        "label": "MinHeap",
        "kind": 6,
        "importPath": "data_structures.heaps.min_heap",
        "description": "data_structures.heaps.min_heap",
        "peekOfCode": "class MinHeap:\n    \"\"\"\n    A MinHeap is a complete binary tree where each node is smaller than its children. The root node is the smallest element in the heap. The two main operations are insert and extract_min. The time complexity of both operations is O(log n).\n    Attributes:\n    - heap: A list to store the elements in the heap.\n    Methods:\n    - get_parent_index(index: int) -> int: Returns the index of the parent node of the node at the given index.\n    - get_left_child_index(index: int) -> int: Returns the index of the left child of the node at the given index.\n    - get_right_child_index(index: int) -> int: Returns the index of the right child of the node at the given index.\n    - has_parent(index: int) -> bool: Returns True if the node at the given index has a parent, False otherwise.",
        "detail": "data_structures.heaps.min_heap",
        "documentation": {}
    },
    {
        "label": "MusicPlaylist",
        "kind": 6,
        "importPath": "data_structures.linked_lists.examples.circular_linked_playlist",
        "description": "data_structures.linked_lists.examples.circular_linked_playlist",
        "peekOfCode": "class MusicPlaylist:\n    def __init__(self):\n        self.playlist = CircularLinkedList()\n    def add_song(self, song_name):\n        self.playlist.append(song_name)\n        print(f'Song \"{song_name}\" added to the playlist.')\n    def remove_song(self, song_name):\n        self.playlist.delete_node(song_name)\n        print(f'Song \"{song_name}\" removed from the playlist.')\n    def show_playlist(self):",
        "detail": "data_structures.linked_lists.examples.circular_linked_playlist",
        "documentation": {}
    },
    {
        "label": "Carousel",
        "kind": 6,
        "importPath": "data_structures.linked_lists.examples.doubly_linked_list_carousel",
        "description": "data_structures.linked_lists.examples.doubly_linked_list_carousel",
        "peekOfCode": "class Carousel:\n    def __init__(self) -> None:\n        self.images = DoublyCircularLinkedList()\n    def add_image(self, image_name: str) -> None:\n        self.images.append(image_name)\n        print(f'Image \"{image_name}\" added to the carousel.')\n    def remove_image(self, image_name: str) -> None:\n        self.images.delete_node(image_name)\n        print(f'Image \"{image_name}\" removed from the carousel.')\n    def show_images(self) -> None:",
        "detail": "data_structures.linked_lists.examples.doubly_linked_list_carousel",
        "documentation": {}
    },
    {
        "label": "SongNode",
        "kind": 6,
        "importPath": "data_structures.linked_lists.examples.doubly_linked_playlist",
        "description": "data_structures.linked_lists.examples.doubly_linked_playlist",
        "peekOfCode": "class SongNode:\n    def __init__(self, song, next=None):\n        self.song = song\n        self.next = next\n        self.prev = None\nclass Playlist:\n    def __init__(self) -> None:\n        self.head: SongNode | None = None\n    def is_empty(self) -> bool:\n        return self.head is None",
        "detail": "data_structures.linked_lists.examples.doubly_linked_playlist",
        "documentation": {}
    },
    {
        "label": "Playlist",
        "kind": 6,
        "importPath": "data_structures.linked_lists.examples.doubly_linked_playlist",
        "description": "data_structures.linked_lists.examples.doubly_linked_playlist",
        "peekOfCode": "class Playlist:\n    def __init__(self) -> None:\n        self.head: SongNode | None = None\n    def is_empty(self) -> bool:\n        return self.head is None\n    def add_song(self, song: str) -> None:\n        new_song = SongNode(song)\n        if self.is_empty():\n            self.head = new_song\n            return",
        "detail": "data_structures.linked_lists.examples.doubly_linked_playlist",
        "documentation": {}
    },
    {
        "label": "SONG_4",
        "kind": 5,
        "importPath": "data_structures.linked_lists.examples.doubly_linked_playlist",
        "description": "data_structures.linked_lists.examples.doubly_linked_playlist",
        "peekOfCode": "SONG_4 = \"Song 4\"\nif __name__ == \"__main__\":\n    playlist = Playlist()\n    playlist.add_song(\"Song 1\")\n    playlist.add_song(\"Song 2\")\n    playlist.add_song(\"Song 3\")\n    playlist.add_song(SONG_4)\n    playlist.add_song(\"Song 5\")\n    playlist.display_songs()\n    print()",
        "detail": "data_structures.linked_lists.examples.doubly_linked_playlist",
        "documentation": {}
    },
    {
        "label": "CircularLinkedList",
        "kind": 6,
        "importPath": "data_structures.linked_lists.circular_linked_list",
        "description": "data_structures.linked_lists.circular_linked_list",
        "peekOfCode": "class CircularLinkedList:\n    \"\"\"\n    A circular linked list is a linked list where all nodes are connected to form a circle. Each node has a reference to the next node in the sequence. The last node points back to the first node. The list can be traversed in both directions.\n    Operations:\n    - is_empty: Check if the list is empty.\n    - append: Add an item to the end of the list.\n    - prepend: Add an item to the beginning of the list.\n    - insert: Add an item at a specific index in the list.\n    - delete_node: Remove an item from the list.\n    - display: Display the items in the list.",
        "detail": "data_structures.linked_lists.circular_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyCircularLinkedList",
        "kind": 6,
        "importPath": "data_structures.linked_lists.doubly_circular_linked_list",
        "description": "data_structures.linked_lists.doubly_circular_linked_list",
        "peekOfCode": "class DoublyCircularLinkedList:\n    \"\"\"\n    A doubly circular linked list is a linear data structure that consists of a sequence of elements. Each element points to the next element and the previous element. The last element points to the first element, forming a circle. The first element points to the last element. The list can be traversed in both directions.\n    Operations:\n    - is_empty: Check if the list is empty.\n    - append: Add an item to the end of the list.\n    - prepend: Add an item to the beginning of the list.\n    - insert_after: Add an item after a specific item in the list.\n    - delete_node: Remove an item from the list.\n    - display: Display the items in the list.",
        "detail": "data_structures.linked_lists.doubly_circular_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "kind": 6,
        "importPath": "data_structures.linked_lists.doubly_linked_list",
        "description": "data_structures.linked_lists.doubly_linked_list",
        "peekOfCode": "class DoublyLinkedList:\n    \"\"\"\n    A doubly linked list is a list that consists of a sequence of elements in which every element has a link to its previous element and next element.\n    Operations:\n    - is_empty: Check if the list is empty.\n    - append: Add a new node to the end of the list.\n    - prepend: Add a new node to the beginning of the list.\n    - insert: Add a new node at a specific index.\n    - remove: Remove a node at a specific index.\n    Applications:",
        "detail": "data_structures.linked_lists.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "index_error_message",
        "kind": 5,
        "importPath": "data_structures.linked_lists.doubly_linked_list",
        "description": "data_structures.linked_lists.doubly_linked_list",
        "peekOfCode": "index_error_message = \"Index out of range\"\nclass DoublyLinkedList:\n    \"\"\"\n    A doubly linked list is a list that consists of a sequence of elements in which every element has a link to its previous element and next element.\n    Operations:\n    - is_empty: Check if the list is empty.\n    - append: Add a new node to the end of the list.\n    - prepend: Add a new node to the beginning of the list.\n    - insert: Add a new node at a specific index.\n    - remove: Remove a node at a specific index.",
        "detail": "data_structures.linked_lists.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "data_structures.linked_lists.node",
        "description": "data_structures.linked_lists.node",
        "peekOfCode": "class Node:\n    def __init__(self, data: Any) -> None:\n        self.data = data\n        self.next: Node | None = None\n        self.prev: Node | None = None",
        "detail": "data_structures.linked_lists.node",
        "documentation": {}
    },
    {
        "label": "SinglyLinkedList",
        "kind": 6,
        "importPath": "data_structures.linked_lists.singly_linked_list",
        "description": "data_structures.linked_lists.singly_linked_list",
        "peekOfCode": "class SinglyLinkedList:\n    \"\"\"\n    A singly linked list is a data structure that consists of a sequence of nodes. Each node contains an element and a reference to the next node in the sequence. The list can be traversed in one direction.\n    Operations:\n    - is_empty: Check if the list is empty.\n    - append: Add a new node to the end of the list.\n    - prepend: Add a new node to the beginning of the list.\n    - insert: Add a new node at a specific index in the list.\n    - remove: Remove the first node with the specified data.\n    - pop: Remove the node at a specific index in the list.",
        "detail": "data_structures.linked_lists.singly_linked_list",
        "documentation": {}
    },
    {
        "label": "StackLinkedList",
        "kind": 6,
        "importPath": "data_structures.linked_lists.stack_linked_list",
        "description": "data_structures.linked_lists.stack_linked_list",
        "peekOfCode": "class StackLinkedList:\n    \"\"\"\n    A stack is a linear data structure that follows the Last In First Out (LIFO) principle. The last element added to the stack is the first element to be removed. A stack can be implemented using an array or a linked list. In this implementation, a singly linked list is used.\n    Operations:\n    - push: Add an element to the top of the stack.\n    - pop: Remove and return the element at the top of the stack.\n    - peek: Get the element at the top of the stack without removing it.\n    - is_empty: Check if the stack is empty.\n    - display: Display the elements in the stack.\n    Applications:",
        "detail": "data_structures.linked_lists.stack_linked_list",
        "documentation": {}
    },
    {
        "label": "TicketingSystem",
        "kind": 6,
        "importPath": "data_structures.queues.examples.ticketing_system",
        "description": "data_structures.queues.examples.ticketing_system",
        "peekOfCode": "class TicketingSystem:\n    def __init__(self) -> None:\n        self.customers = Queue()\n    def new_customer(self, customer_name: str) -> None:\n        self.customers.enqueue(customer_name)\n        print(f'Customer \"{customer_name}\" added to the queue.')\n    def serve_customer(self) -> None:\n        customer = self.customers.dequeue()\n        if customer:\n            print(f'Customer \"{customer}\" served.')",
        "detail": "data_structures.queues.examples.ticketing_system",
        "documentation": {}
    },
    {
        "label": "CircularQueue",
        "kind": 6,
        "importPath": "data_structures.queues.circular_queue",
        "description": "data_structures.queues.circular_queue",
        "peekOfCode": "class CircularQueue:\n    \"\"\"\n    A circular queue is a data structure that uses a single, fixed-size array to store elements. It follows the FIFO (First In First Out) principle. When the rear of the queue reaches the end of the array, it wraps around to the beginning of the array. This allows the queue to use the space efficiently.\n    Operations:\n    - is_empty: Check if the queue is empty.\n    - is_full: Check if the queue is full.\n    - enqueue: Add an item to the rear of the queue.\n    - dequeue: Remove an item from the front of the queue.\n    - peek: Get the item at the front of the queue without removing it.\n    - display: Display the items in the queue.",
        "detail": "data_structures.queues.circular_queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "data_structures.queues.queue",
        "description": "data_structures.queues.queue",
        "peekOfCode": "class Queue:\n    \"\"\"\n    A queue is a linear data structure that follows the FIFO (First In First Out) principle. The first element added to the queue is the first element to be removed. A queue can be implemented using an array or a linked list. In this implementation, a list is used.\n    Operations:\n    - is_empty: Check if the queue is empty.\n    - enqueue: Add an item to the rear of the queue.\n    - dequeue: Remove an item from the front of the queue.\n    - peek: Get the item at the front of the queue without removing it.\n    - size: Get the number of items in the queue.\n    - display: Display the items in the queue.",
        "detail": "data_structures.queues.queue",
        "documentation": {}
    },
    {
        "label": "TextEditor",
        "kind": 6,
        "importPath": "data_structures.stacks.examples.text_editor_undo",
        "description": "data_structures.stacks.examples.text_editor_undo",
        "peekOfCode": "class TextEditor:\n    def __init__(self) -> None:\n        self.text = \"\"\n        self.undo_stack = Stack()\n    def write(self, text: str) -> None:\n        self.text += text\n        self.undo_stack.push(f\"Undo: Delete {len(text)} characters\")\n    def delete(self, num_characters: int) -> None:\n        if num_characters > len(self.text):\n            print(\"Cannot delete more characters than present in the text.\")",
        "detail": "data_structures.stacks.examples.text_editor_undo",
        "documentation": {}
    },
    {
        "label": "editor",
        "kind": 5,
        "importPath": "data_structures.stacks.examples.text_editor_undo",
        "description": "data_structures.stacks.examples.text_editor_undo",
        "peekOfCode": "editor = TextEditor()\neditor.write(\"Hello\")\neditor.write(\" World\")\neditor.display()  # Output: Current text: Hello World\neditor.delete(1)\neditor.display()  # Output: Current text: Hello Worl\neditor.undo()\neditor.display()  # Output: Current text: Hello World\neditor.undo()\neditor.display()  # Output: Current text: Hello",
        "detail": "data_structures.stacks.examples.text_editor_undo",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "data_structures.stacks.stack",
        "description": "data_structures.stacks.stack",
        "peekOfCode": "class Stack:\n    \"\"\"\n    A stack is a linear data structure that follows the Last In First Out (LIFO) principle. The last element added to the stack is the first element to be removed.\n    Operations:\n    - is_empty: Check if the stack is empty.\n    - push: Add an element to the top of the stack.\n    - pop: Remove and return the element at the top of the stack.\n    - peek: Get the element at the top of the stack without removing it.\n    - display: Display the elements in the stack.\n    Applications:",
        "detail": "data_structures.stacks.stack",
        "documentation": {}
    },
    {
        "label": "stack",
        "kind": 5,
        "importPath": "data_structures.stacks.stack",
        "description": "data_structures.stacks.stack",
        "peekOfCode": "stack = Stack()\nstack.push(1)\nstack.push(2)\nstack.push(3)\nstack.display()  # Output: Stack: [1, 2, 3]\nprint(\"Peek:\", stack.peek())  # Output: Peek: 3\nstack.pop()  # Output: Popped 3 from the stack.\nstack.display()  # Output: Stack: [1, 2]",
        "detail": "data_structures.stacks.stack",
        "documentation": {}
    }
]